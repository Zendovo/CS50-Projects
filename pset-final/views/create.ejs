<!-- CSS -->
<link rel="stylesheet" type="text/css" href="/css/create.css">
<link rel="stylesheet" type="text/css" href="/css/slider.css">

<h1 class="mt-5 text-center">Create your schedule here!</h1>

<section class="container schedule-create-container">

    <div class="mt-4 flex-container bounds-container jumbotron">

        <h3 class="mt-4 text-center">Working Hours</h3>
        <p class="lead text-center">The hours during which a meeting should be scheduled</p>
        <hr class="mb-3" width="100%">

        <div class="card text-white bg-primary mb-3 w-75" style="margin: auto;">
            <div class="card-header mb-0"><h4 class="card-title">How to use</h4></div>
            <div class="card-body">
                <p class="card-text">Here, you set the time range where you want to schedule your meetings.</p>
                <p class="card-text">
                    <i>For example</i>
                </p>
                <p class="card-text">
                    If you work from 9AM to 5PM, then you adjust the first handle to 9AM and the second to 5PM. Then you can add your meetings
                </p>
            </div>
        </div>

        <div id="time-range">
            <p>Schedule Bounds: <span class="slider-time">9:00 AM</span> - <span class="slider-time2">5:00 PM</span></p>

            <div class="sliders_step1">
                <div class="slider-range bounds-slider"></div>
            </div>
        </div>

    </div>
    
    <div class="flex-container meetings-container jumbotron">

        <h3 class="mt-4 text-center">Meetings</h3>
        <p class="lead text-center">Meetings to be added in chronological order</h7>
        <hr class="mb-3" width="100%">

        <div class="card text-white bg-primary mb-3 w-75" style="margin: auto;">
            <div class="card-header mb-0"><h4 class="card-title">How to use</h4></div>
            <div class="card-body">
                <p class="card-text">Here, you add your meetings.</p>
                <p class="font-weight-bold">They must be added in chronological order!</p>
                <p class="card-text">
                    <i>For example</i>
                </p>
                <p class="card-text">
                    If you have a meeting from 10AM to 11AM and 3:30PM to 4:45PM, you must add your first meeting by clicking on the + button.
                </p>
                <p class="card-text">
                    Then when you click the + button the slider will adjust to the end of your last meeting and then you can adjust the handles to 3:30PM and 4:45PM respectively.
                </p>

                <p class="card-text">NOTE: You cannot change your previous meeting without removing the later ones.</p>
            </div>
        </div>

        <input type="number" id="meetings_count" value="0" hidden>

        <div class="text-center">
            <button class="btn btn-success add-meeting-btn" onclick="addMeeting()">+</button>
            <button class="btn btn-primary" onclick="previewMeeting()">Done</button>
        </div>

    </div>

    <div class="mt-5 jumbotron preview-container w-100" hidden>

        <h3 class="mt-4 mb-3 text-center">Preview</h3>
        <hr class="mb-5" width="100%">
        <div class="schedule-bar w-100" style="display: grid;">

        </div>

        <% if (loggedIn) { %>
            <form method="get" action="/schedule/add" class="mt-5" style="text-align: center;">
                <input type="text" name="schedule" id="schedule" hidden>
                <button class="btn btn-success w-25" type="submit">Add</button>
            </form>
        <% } else { %>
            <form class="mt-5" style="text-align: center;">
                <h7>Your Schedule Code! (Save it for use)</h7>
                <input type="text" style="text-align: center;" class="form-control" id="schedule" name="schedule" disabled>
            </form>
        <% } %>

    </div>

    <script>

        function addMeeting() {
            
            var current = parseInt($('#meetings_count').val());
            var boundsSlider = $(".bounds-slider");
            var values = boundsSlider.slider("option", "values");

            var start = values[0]
            var end = values[1]

            var min;
            var max;

            if (current === 0) {
                
                // Set the min and max values to the bound values and disable the bounds slider
                
                min = start
                max = end

                boundsSlider.slider("disable");
                
            } else {

                // Set the min value to the end time of the last meeting
                
                var lastMeetingValues = $('.meeting-' + current).slider("option", "values");

                console.log(lastMeetingValues[1], end)

                // Check if the last value is equal to the end value of the bounds
                if (lastMeetingValues[1] === end)  {
                    alert('Hey! You have already filled all your time!')

                    return
                }

                min = lastMeetingValues[1]
                max = end

                $('.meeting-' + current).slider("disable");

                // Remove the remove-btn from the last meeting
                animateCSS('.remove-' + current, 'fadeOut', () => {
                    $('.remove-' + current).remove();
                })
                
            }

            var array = intToHnM([min, max], true, false);
            var hours1 = array[0][0]
            var minutes1 = array[0][1]
            var hours2 = array[1][0]
            var minutes2 = array[1][1]

            $('#meetings_count').val(current + 1);

            var newSliderHTML = `<div class="animated bounceInLeft meeting-container-${current + 1}" id="time-range">
                                    <p>Meeting #${current + 1}: <span class="slider-time">${hours1 + ':' + minutes1}</span> - <span class="slider-time2">${hours2 + ':' + minutes2}</span>
                                        <button onclick="removeMeeting()" class="ml-2 btn btn-sm btn-danger remove-${current + 1}"> - </button>
                                    </p>

                                    <div class="sliders_step1">
                                        <div class="slider-range meeting-${current + 1}"></div>
                                    </div>
                                </div>`

            $('.meetings-container').append(newSliderHTML);

            $(".meeting-" + (current + 1)).slider({
                range: true,
                min,
                max,
                step: 1,
                values: [min, max],
                slide: function (e, ui) {

                    var sliderTime = e.target.parentElement.parentElement.children[0]

                    var hours1 = Math.floor(ui.values[0] / 60);
                    var minutes1 = ui.values[0] - (hours1 * 60);

                    if (hours1.length == 1) hours1 = '0' + hours1;
                    if (minutes1.length == 1) minutes1 = '0' + minutes1;
                    if (minutes1 == 0) minutes1 = '00';
                    if (hours1 >= 12) {
                        if (hours1 == 12) {
                            hours1 = hours1;
                            minutes1 = minutes1 + " PM";
                        } else {
                            hours1 = hours1 - 12;
                            minutes1 = minutes1 + " PM";
                        }
                    } else {
                        hours1 = hours1;
                        minutes1 = minutes1 + " AM";
                    }
                    if (hours1 == 0) {
                        hours1 = 12;
                        minutes1 = minutes1;
                    }

                    var m1 = parseInt(minutes1.substring(0, 2));
                    sliderTime.children[0].innerHTML = hours1 + ':' + (m1 < 10 && m1 !== 0 ? '0' + minutes1 : minutes1)

                    var hours2 = Math.floor(ui.values[1] / 60);
                    var minutes2 = ui.values[1] - (hours2 * 60);

                    if (hours2.length == 1) hours2 = '0' + hours2;
                    if (minutes2.length == 1) minutes2 = '0' + minutes2;
                    if (minutes2 == 0) minutes2 = '00';
                    if (hours2 >= 12) {
                        if (hours2 == 12) {
                            hours2 = hours2;
                            minutes2 = minutes2 + " PM";
                        } else if (hours2 == 24) {
                            hours2 = 11;
                            minutes2 = "59 PM";
                        } else {
                            hours2 = hours2 - 12;
                            minutes2 = minutes2 + " PM";
                        }
                    } else {
                        hours2 = hours2;
                        minutes2 = minutes2 + " AM";
                    }
                    
                    var m2 = parseInt(minutes2.substring(0, 2));
                    sliderTime.children[1].innerHTML = hours2 + ':' + (m2 < 10 && m2 !== 0 ? '0' + minutes2 : minutes2)
                }
            });
            
        }

        function removeMeeting() {

            var current = parseInt($('#meetings_count').val());

            const meeting =  document.querySelector('.meeting-container-' + current)
            meeting.classList.add('animated', 'bounceOutLeft')

            $('.add-meeting-btn').prop('disabled', true)

            meeting.addEventListener('animationend', () => {

                meeting.remove();
                $('#meetings_count').val(current - 1);
                $('.add-meeting-btn').prop('disabled', false)

            })

            if (current - 1 === 0) {
                $('.bounds-slider').slider('enable');
            }

            var removeBtn = `<button onclick="removeMeeting()" class="ml-2 animated fadeIn btn btn-sm btn-danger remove-${current - 1}"> - </button>`

            $(`.meeting-container-${current - 1} > p`).append(removeBtn)
            $('.meeting-' + (current-1)).slider('enable');

        }

        function previewMeeting() {
            
            var current = parseInt($('#meetings_count').val());

            if (current === 0) return alert('You seem to have added no meetings!')
            
            const boundValues = $('.bounds-slider').slider('option', 'values')
            var boundTimes = intToHnM(boundValues);
            var bound_hours1 = boundTimes[0][0]
            var bound_minutes1 = boundTimes[0][1]
            var bound_hours2 = boundTimes[1][0]
            var bound_minutes2 = boundTimes[1][1]

            var bounds = [`${bound_hours1}:${bound_minutes1}`, `${bound_hours2}:${bound_minutes2}`]

            var meetings = []
            var schedule = [bounds, meetings]

            for (let i = 1; i < current + 1; i++) {
                
                const values = $('.meeting-' + i).slider('option', 'values')
                // console.log(values)

                var array = intToHnM(values);
                var hours1 = array[0][0]
                var minutes1 = array[0][1]
                var hours2 = array[1][0]
                var minutes2 = array[1][1]

                // console.log(hours1, minutes1)
                // console.log(hours2, minutes2)

                meetings.push([`${hours1}:${minutes1}`, `${hours2}:${minutes2}`])

            }

            $('#schedule').val(JSON.stringify(schedule))
            progressBar()

            $('.preview-container').prop('hidden', false)

        }

        function intToHnM(values, range = true, military = true) {

            var hours1 = Math.floor(values[0] / 60);
            var minutes1 = values[0] - (hours1 * 60);

            if (hours1.length == 1) hours1 = '0' + hours1;
            if (minutes1.length == 1) minutes1 = '0' + minutes1;
            minutes1 = (minutes1 < 10 ? '0' + minutes1 : minutes1)
            if (!military) {
                if (hours1 >= 12) {
                    if (hours1 == 12) {
                        hours1 = hours1;
                        minutes1 = minutes1 + " PM";
                    } else {
                        hours1 = hours1 - 12;
                        minutes1 = minutes1 + " PM";
                    }
                } else {
                    hours1 = hours1;
                    minutes1 = minutes1 + " AM";
                }
                if (hours1 == 0) {
                    hours1 = 12;
                    minutes1 = minutes1;
                }
            }
            if (!range) return [hours1, minutes1];

            var hours2 = Math.floor(values[1] / 60);
            var minutes2 = values[1] - (hours2 * 60);

            if (hours2.length == 1) hours2 = '0' + hours2;
            if (minutes2.length == 1) minutes2 = '0' + minutes2;
            minutes2 = (minutes2 < 10 ? '0' + minutes2 : minutes2)
            if (!military) {
                if (hours2 >= 12) {
                    if (hours2 == 12) {
                        hours2 = hours2;
                        minutes2 = minutes2 + " PM";
                    } else if (hours2 == 24) {
                        hours2 = 12;
                        minutes2 = "00 AM";
                    } else {
                        hours2 = hours2 - 12;
                        minutes2 = minutes2 + " PM";
                    }
                } else {
                    hours2 = hours2;
                    minutes2 = minutes2 + " AM";
                }
            }

            return [[hours1, minutes1], [hours2, minutes2]]
            
        }

        function animateCSS(element, animationName, callback) {
            const node = document.querySelector(element)
            node.classList.add('animated', animationName)

            function handleAnimationEnd() {
                node.classList.remove('animated', animationName)
                node.removeEventListener('animationend', handleAnimationEnd)

                if (typeof callback === 'function') callback()
            }

            node.addEventListener('animationend', handleAnimationEnd)
        }

    </script>

    <script>

        function progressBar() {

            var schedule = JSON.parse($('#schedule').val())
            var bounds = schedule[0]
            var meetings = schedule[1]

            // var lengths = [bound2first, firstMeeting, first2second, secondMeeting, second2third, thirdMeeting, last2bound]
            var lengths = []
            var percentages = []

            lengths.push(diffBetweenTimes(bounds[0], meetings[0][0]))

            meetings.forEach((meeting, index) => {

                lengths.push(diffBetweenTimes(meeting[0], meeting[1]))

                if (index === meetings.length - 1) {
                    return;
                }

                lengths.push(diffBetweenTimes(meeting[1], meetings[index + 1][0]))
                
            });

            lengths.push(diffBetweenTimes(bounds[1], meetings[meetings.length - 1][1]))

            var totalTime = diffBetweenTimes(bounds[0], bounds[1])
            lengths.forEach(length => {
                percentages.push(((length / totalTime) * 100))
            });

            var div = $('<div>', {class: 'progress w-100'}).css('margin', 'auto')
            
            var startToBound = (diffBetweenTimes(bounds[0], '00:00') / totalTime) * 100
            div.append(`<div class="progress-bar progress-bar-striped progress-bar-lightgray" role="progressbar" style="width: ${startToBound}%"></div>`)
            
            percentages.forEach((per, index) => {
                
                if (index % 2 === 0) {

                    if (index === 0) {

                        var meetingEnd = bounds[0];
                        var next_meetingStart = meetings[0][0]

                    } else if (index < percentages.length - 1) {

                        var meetingEnd = meetings[index / 2 - 1][1];
                        var next_meetingStart = meetings[index / 2][0];

                    } else if (index === percentages.length - 1) {

                        var meetingEnd = meetings[index / 2 - 1][1];
                        var next_meetingStart = bounds[1];

                    }

                    var text = meetingEnd + ' - ' + next_meetingStart;
                    div.append(`<div class="progress-bar progress-bar-striped bg-success" role="progressbar" style="width: ${per}%" data-toggle="tooltip" title="${text}" aria-valuemin="0" aria-valuemax="100"></div>`)
                } else {
                    var text = meetings[Math.floor(index / 2)][0] + ' - ' + meetings[Math.floor(index / 2)][1]
                    var altColor = (index % 4 === 1) ? 'progress-bar-gray' : 'progress-bar-gray2'
                    div.append(`<div class="progress-bar progress-bar-striped ${altColor}" role="progressbar" style="width: ${per}%" data-toggle="tooltip" title="${text}" aria-valuemin="0" aria-valuemax="100"></div>`)
                }
                
            })

            var boundToEnd = (diffBetweenTimes(bounds[1], '24:00') / totalTime) * 100
            div.append(`<div class="progress-bar progress-bar-striped progress-bar-lightgray" role="progressbar" style="width: ${boundToEnd}%"></div>`)
            
            var timestamp = $(`<div class="row justify-content-between text-center">
                                <div class="col">0</div>
                                <div class="col">2</div>
                                <div class="col">4</div>
                                <div class="col">6</div>
                                <div class="col">8</div>
                                <div class="col">10</div>
                                <div class="col">12</div>
                                <div class="col">14</div>
                                <div class="col">16</div>
                                <div class="col">18</div>
                                <div class="col">20</div>
                                <div class="col">22</div>
                                <div class="col">24</div>
                            </div>`)            
            $('.schedule-bar').html(timestamp.add(div))
            $('[data-toggle="tooltip"]').tooltip(); 

        }

        function compareTimes(t1, t2) {

            // Split the hour and the minute
            var [h1, m1] = t1.split(':');
            var [h2, m2] = t2.split(':');

            // Determine the total number of minutes
            // To make performing calculations easy
            t1 = parseInt(h1) * 60 + parseInt(m1);
            t2 = parseInt(h2) * 60 + parseInt(m2);

            if (t1 < t2) {
                return - 1;
            } else if (t1 > t2) {
                return 1;            
            } else {
                return 0;
            }
        }

        function diffBetweenTimes(t1, t2) {

            // Split the hour and the minute
            var [h1, m1] = t1.split(':');
            var [h2, m2] = t2.split(':');

            // Determine the total number of minutes
            // To make performing calculations easy
            t1 = parseInt(h1) * 60 + parseInt(m1);
            t2 = parseInt(h2) * 60 + parseInt(m2);

            return Math.abs(t1 - t2);

        }

    </script>

    <script>
        $(".slider-range").slider({
            range: true,
            min: 0,
            max: 1440,
            step: 1,
            values: [540, 1020],
            slide: function (e, ui) {

                var sliderTime = e.target.parentElement.parentElement.children[0]

                var hours1 = Math.floor(ui.values[0] / 60);
                var minutes1 = ui.values[0] - (hours1 * 60);

                if (hours1.length == 1) hours1 = '0' + hours1;
                if (minutes1.length == 1) minutes1 = '0' + minutes1;
                if (minutes1 == 0) minutes1 = '00';
                if (hours1 >= 12) {
                    if (hours1 == 12) {
                        hours1 = hours1;
                        minutes1 = minutes1 + " PM";
                    } else {
                        hours1 = hours1 - 12;
                        minutes1 = minutes1 + " PM";
                    }
                } else {
                    hours1 = hours1;
                    minutes1 = minutes1 + " AM";
                }
                if (hours1 == 0) {
                    hours1 = 12;
                    minutes1 = minutes1;
                }

                var m1 = parseInt(minutes1.substring(0, 2));
                sliderTime.children[0].innerHTML = hours1 + ':' + (m1 < 10 && m1 !== 0 ? '0' + minutes1 : minutes1)

                var hours2 = Math.floor(ui.values[1] / 60);
                var minutes2 = ui.values[1] - (hours2 * 60);

                if (hours2.length == 1) hours2 = '0' + hours2;
                if (minutes2.length == 1) minutes2 = '0' + minutes2;
                if (minutes2 == 0) minutes2 = '00';
                if (hours2 >= 12) {
                    if (hours2 == 12) {
                        hours2 = hours2;
                        minutes2 = minutes2 + " PM";
                    } else if (hours2 == 24) {
                        hours2 = 12;
                        minutes2 = "00 AM";
                    } else {
                        hours2 = hours2 - 12;
                        minutes2 = minutes2 + " PM";
                    }
                } else {
                    hours2 = hours2;
                    minutes2 = minutes2 + " AM";
                }
                
                var m2 = parseInt(minutes2.substring(0, 2));
                sliderTime.children[1].innerHTML = hours2 + ':' + (m2 < 10 && m2 !== 0 ? '0' + minutes2 : minutes2)
            }
        });
    </script>

</section>